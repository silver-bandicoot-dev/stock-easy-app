#!/bin/bash

##############################################################################
# SCRIPT DE ROLLBACK S√âCURIS√â
# Cr√©√© le: 2025-10-17
# Objectif: Revenir au commit stable 62c2d289 (Button component)
##############################################################################

set -e  # Arr√™ter en cas d'erreur

echo "========================================="
echo "üîÑ SCRIPT DE ROLLBACK S√âCURIS√â"
echo "========================================="
echo ""

# V√©rifier que nous sommes dans un d√©p√¥t git
if [ ! -d .git ]; then
    echo "‚ùå ERREUR: Ce script doit √™tre ex√©cut√© √† la racine du d√©p√¥t git"
    exit 1
fi

# Variables
COMMIT_CIBLE="62c2d289ba5ec383648a82f46275c57506b57989"
BRANCH_HOTFIX="hotfix/rollback-to-stable-button-component"
BACKUP_BRANCH="backup-avant-rollback-$(date +%Y%m%d-%H%M%S)"

echo "üìä Configuration:"
echo "  - Commit cible: $COMMIT_CIBLE"
echo "  - Branche hotfix: $BRANCH_HOTFIX"
echo "  - Branche backup: $BACKUP_BRANCH"
echo ""

# √âTAPE 1: Cr√©er une branche de backup
echo "üì¶ √âTAPE 1/5: Cr√©ation de la branche de backup..."
git branch "$BACKUP_BRANCH"
echo "‚úÖ Branche de backup cr√©√©e: $BACKUP_BRANCH"
echo ""

# √âTAPE 2: Afficher ce qui sera perdu
echo "‚ö†Ô∏è  √âTAPE 2/5: Voici ce qui sera annul√©:"
echo "----------------------------------------"
git log --oneline "$COMMIT_CIBLE..HEAD"
echo ""
echo "üìù Fichiers modifi√©s: 65 fichiers, +9489 lignes"
echo ""
read -p "‚ùì Voulez-vous continuer? (oui/non): " CONFIRMATION

if [ "$CONFIRMATION" != "oui" ]; then
    echo "‚ùå Op√©ration annul√©e par l'utilisateur"
    exit 0
fi

# √âTAPE 3: Cr√©er la branche hotfix depuis le commit stable
echo ""
echo "üîß √âTAPE 3/5: Cr√©ation de la branche hotfix..."
git checkout -b "$BRANCH_HOTFIX" "$COMMIT_CIBLE"
echo "‚úÖ Branche hotfix cr√©√©e et checkout effectu√©"
echo ""

# √âTAPE 4: Pusher la branche hotfix
echo "üì§ √âTAPE 4/5: Push de la branche hotfix vers origin..."
git push origin "$BRANCH_HOTFIX"
echo "‚úÖ Branche hotfix push√©e avec succ√®s"
echo ""

# √âTAPE 5: Instructions pour le merge dans main
echo "========================================="
echo "‚úÖ HOTFIX CR√â√â AVEC SUCC√àS!"
echo "========================================="
echo ""
echo "üìã PROCHAINES √âTAPES (√Ä FAIRE APR√àS TEST):"
echo ""
echo "1. Tester la branche hotfix:"
echo "   git checkout $BRANCH_HOTFIX"
echo "   # Tester l'application..."
echo ""
echo "2. Si tout est OK, merger dans main:"
echo "   git checkout main"
echo "   git merge $BRANCH_HOTFIX"
echo "   git push origin main"
echo ""
echo "3. En cas de probl√®me, revenir √† la branche de backup:"
echo "   git checkout $BACKUP_BRANCH"
echo ""
echo "‚ö†Ô∏è  IMPORTANT: Ne supprimez pas la branche $BACKUP_BRANCH"
echo "   avant d'√™tre s√ªr que tout fonctionne correctement!"
echo ""
echo "========================================="
