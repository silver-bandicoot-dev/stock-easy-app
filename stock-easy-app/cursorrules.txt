üéØ GUIDE DE REFACTORING PERSONNALIS√â - STOCKEASY.JSX
Analyse et Refactoring M√©thodique de votre Application

üìä ANALYSE PR√âLIMINAIRE - VOTRE FICHIER ACTUEL
Statistiques du Fichier

Taille : 256 KB (256,641 bytes)
Lignes de code : ~3876 lignes
Derni√®re modification : 23 octobre 2025 √† 15h17
Complexit√© : üî¥ CRITIQUE - Fichier monolithique √©norme

üî¥ PROBL√àMES MAJEURS IDENTIFI√âS
1. Taille du Fichier Monolithique

‚ùå Un seul fichier de 3876 lignes
‚ùå Responsabilit√© unique viol√©e
‚ùå Maintenance extr√™mement difficile
‚ùå Bugs en cascade lors de modifications

2. √âtat (States) Excessifs

‚ùå 40+ √©tats React dans un seul composant
Exemples trouv√©s :

javascript     const [loading, setLoading] = useState(true);
     const [syncing, setSyncing] = useState(false);
     const [products, setProducts] = useState([]);
     const [suppliers, setSuppliers] = useState({});
     const [warehouses, setWarehouses] = useState({});
     const [orders, setOrders] = useState([]);
     const [parameters, setParameters] = useState({});
     const [activeTab, setActiveTab] = useState('dashboard');
     const [trackTabSection, setTrackTabSection] = useState('en_cours_commande');
     const [emailModalOpen, setEmailModalOpen] = useState(false);
     const [selectedSupplier, setSelectedSupplier] = useState(null);
     const [notificationsOpen, setNotificationsOpen] = useState(false);
     const [receivingModalOpen, setReceivingModalOpen] = useState(false);
     // ... et 30+ autres √©tats !
3. Logique M√©tier M√©lang√©e avec l'UI

‚ùå Fonctions API dans le composant
‚ùå Calculs de business logic dans le render
‚ùå Validation de donn√©es dispers√©e

4. Imports Massifs

‚ùå 30+ imports diff√©rents
‚ùå D√©pendances multiples non organis√©es
‚ùå Imports de composants m√©lang√©s avec utils

5. Fonctions de Gestion Multiples

‚ùå 50+ fonctions handler dans le composant
Exemples :

handleUpdateSeuilSurstock
handleUpdateDevise
handleUpdateMultiplicateur
handleOpenSupplierModal
handleSaveSupplier
handleDeleteSupplier
handleCreateWarehouse
handleUpdateWarehouse
handleDeleteWarehouse
handleOpenAssignSupplierModal
handleAssignSupplier
confirmOrder
shipOrder
receiveOrder
openReconciliationModal
... et beaucoup d'autres !



6. JSX √ânorme et Imbriqu√©

‚ùå 2000+ lignes de JSX
‚ùå Profondeur d'imbrication > 10 niveaux
‚ùå Conditions ternaires complexes
‚ùå R√©p√©tition de structures UI


üéØ OBJECTIFS DU REFACTORING
Objectif Principal
Transformer StockEasy.jsx (3876 lignes) en une architecture modulaire de ~100-150 lignes
Objectifs Secondaires

‚úÖ Extraire 15-20 composants distincts
‚úÖ Cr√©er 8-10 hooks personnalis√©s
‚úÖ Centraliser la logique m√©tier
‚úÖ Am√©liorer la maintenabilit√© de 90%
‚úÖ R√©duire le temps de debug de 80%
‚úÖ Z√âRO r√©gression fonctionnelle


üó∫Ô∏è ARCHITECTURE CIBLE
Structure Finale Vis√©e
src/
‚îú‚îÄ‚îÄ StockEasy.jsx (100-150 lignes - Orchestrateur)
‚îÇ
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ dashboard/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DashboardCard.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductsToOrder.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductsToWatch.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InTransit.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ReceivedOrders.jsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ actions/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ OrderBySupplier.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProductSelectionTable.jsx (d√©j√† existe)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ OrderCreationModal.jsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ track/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TrackTabs.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PendingOrders.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PreparingOrders.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InTransitOrders.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ReceivedOrders.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ReconciliationOrders.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ OrderCard.jsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ stock/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ StockTable.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ StockFilters.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ StockExport.jsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ analytics/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AnalyticsDashboard.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ KPICard.jsx (d√©j√† existe)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ InsightsList.jsx
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ settings/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SettingsTabs.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ParametresGeneraux.jsx (d√©j√† existe)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GestionFournisseurs.jsx (d√©j√† existe)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MappingSKUFournisseur.jsx (d√©j√† existe)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ GestionWarehouses.jsx (d√©j√† existe)
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ modals/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EmailModal.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ReconciliationModal.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SupplierModal.jsx (d√©j√† existe)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ AssignSupplierModal.jsx (d√©j√† existe)
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ shared/
‚îÇ       ‚îú‚îÄ‚îÄ Button.jsx (extraire de StockEasy)
‚îÇ       ‚îú‚îÄ‚îÄ Modal.jsx (d√©j√† existe)
‚îÇ       ‚îî‚îÄ‚îÄ LoadingScreen.jsx
‚îÇ
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ useStockData.js
‚îÇ   ‚îú‚îÄ‚îÄ useOrders.js
‚îÇ   ‚îú‚îÄ‚îÄ useSuppliers.js
‚îÇ   ‚îú‚îÄ‚îÄ useWarehouses.js
‚îÇ   ‚îú‚îÄ‚îÄ useParameters.js
‚îÇ   ‚îú‚îÄ‚îÄ useOrderManagement.js
‚îÇ   ‚îú‚îÄ‚îÄ useReconciliation.js
‚îÇ   ‚îî‚îÄ‚îÄ useStockFilters.js
‚îÇ
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ apiService.js (d√©j√† existe)
‚îÇ
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ calculations.js (d√©j√† existe)
‚îÇ   ‚îú‚îÄ‚îÄ decimalUtils.js (d√©j√† existe)
‚îÇ   ‚îú‚îÄ‚îÄ orderUtils.js (√† cr√©er)
‚îÇ   ‚îú‚îÄ‚îÄ dateUtils.js (√† cr√©er)
‚îÇ   ‚îî‚îÄ‚îÄ validationUtils.js (√† cr√©er)
‚îÇ
‚îî‚îÄ‚îÄ constants/
    ‚îú‚îÄ‚îÄ stockEasyConstants.js
    ‚îî‚îÄ‚îÄ statusLabels.js

üìù PLAN DE REFACTORING EN 10 PHASES
‚ö†Ô∏è R√àGLES ABSOLUES AVANT DE COMMENCER
markdown1. üõë JAMAIS plus de 1 fichier modifi√© √† la fois
2. üõë TOUJOURS tester apr√®s chaque modification
3. üõë TOUJOURS commiter apr√®s validation
4. üõë Si quelque chose casse ‚Üí ROLLBACK imm√©diat
5. üõë Garder l'application fonctionnelle 100% du temps

üîµ PHASE 1 : PR√âPARATION ET S√âCURIT√â (30 min)
√âtape 1.1 : Cr√©er la Branche de Refactoring
bashcd /Users/orioncorp/stock-easy-app/stock-easy-app

# V√©rifier l'√©tat du repo
git status

# Cr√©er et passer sur la nouvelle branche
git checkout -b refactoring/stockeasy-modular

# Pousser la branche
git push -u origin refactoring/stockeasy-modular
√âtape 1.2 : Sauvegarder l'√âtat Actuel
bash# Cr√©er le dossier de backup
mkdir -p docs/refactoring/backups

# Copier le fichier original
cp src/StockEasy.jsx docs/refactoring/backups/StockEasy.jsx.original

# Cr√©er un snapshot Git
git add -A
git commit -m "üì∏ SNAPSHOT: √âtat initial avant refactoring (3876 lignes)"
git push
√âtape 1.3 : Cr√©er la Structure de Documentation
bashmkdir -p docs/refactoring/{analysis,plans,logs,tests}

# Cr√©er le fichier de log
echo "# Log de Refactoring - StockEasy.jsx" > docs/refactoring/logs/REFACTORING_LOG.md
echo "D√©but: $(date)" >> docs/refactoring/logs/REFACTORING_LOG.md
echo "" >> docs/refactoring/logs/REFACTORING_LOG.md

üîµ PHASE 2 : EXTRACTION DES CONSTANTES (45 min)
√âtape 2.1 : Cr√©er le Fichier de Constantes
CURSOR, cr√©e ce fichier :
Fichier : src/constants/stockEasyConstants.js
javascript// ============================================
// CONSTANTES STOCK EASY - Extraites de StockEasy.jsx
// ============================================

// Labels de statut des commandes
export const ORDER_STATUS_LABELS = {
  pending_confirmation: 'En attente',
  preparing: 'En traitement',
  in_transit: 'En transit',
  received: 'Re√ßue',
  completed: 'Compl√©t√©e',
  reconciliation: '√Ä r√©concilier'
};

// Labels de statut avec √©mojis
export const ORDER_STATUS_LABELS_EMOJI = {
  pending_confirmation: '‚è≥ En attente',
  preparing: 'üì¶ En traitement',
  in_transit: 'üöö En transit',
  received: '‚úÖ Re√ßue',
  completed: '‚úÖ Compl√©t√©e',
  reconciliation: '‚ö†Ô∏è √Ä r√©concilier'
};

// Couleurs par statut
export const ORDER_STATUS_COLORS = {
  pending_confirmation: {
    bg: 'bg-yellow-50',
    text: 'text-yellow-600',
    border: 'border-yellow-200'
  },
  preparing: {
    bg: 'bg-blue-50',
    text: 'text-blue-600',
    border: 'border-blue-200'
  },
  in_transit: {
    bg: 'bg-purple-50',
    text: 'text-purple-600',
    border: 'border-purple-200'
  },
  received: {
    bg: 'bg-green-50',
    text: 'text-green-600',
    border: 'border-green-200'
  },
  completed: {
    bg: 'bg-gray-50',
    text: 'text-gray-600',
    border: 'border-gray-200'
  },
  reconciliation: {
    bg: 'bg-red-50',
    text: 'text-red-600',
    border: 'border-red-200'
  }
};

// Types d'√©carts de r√©conciliation
export const DISCREPANCY_TYPES = {
  none: 'Aucun probl√®me',
  missing: 'Quantit√©s manquantes',
  damaged: 'Produits endommag√©s',
  missing_and_damaged: 'Manquant et endommag√©'
};

// Onglets principaux
export const MAIN_TABS = {
  DASHBOARD: 'dashboard',
  ACTIONS: 'actions',
  TRACK: 'track',
  STOCK: 'stock',
  ANALYTICS: 'analytics',
  SETTINGS: 'settings',
  AI: 'ai'
};

// Sous-onglets Track
export const TRACK_TABS = {
  EN_COURS_COMMANDE: 'en_cours_commande',
  PREPARATION: 'preparation',
  EN_TRANSIT: 'en_transit',
  COMMANDES_RECUES: 'commandes_recues',
  RECONCILIATION: 'reconciliation',
  COMPLETED: 'completed'
};

// Sous-onglets Stock
export const STOCK_TABS = {
  NIVEAU_STOCK: 'niveau_stock',
  HISTORIQUE: 'historique'
};

// Sous-onglets Param√®tres
export const SETTINGS_TABS = {
  GENERAL: 'general',
  PRODUCTS: 'products',
  SUPPLIERS: 'suppliers',
  MAPPING: 'mapping',
  WAREHOUSES: 'warehouses'
};

// Sous-onglets Analytics
export const ANALYTICS_TABS = {
  KPIS: 'kpis'
};

// Sous-onglets AI
export const AI_TABS = {
  OVERVIEW: 'overview',
  FORECASTS: 'forecasts',
  OPTIMIZATION: 'optimization',
  ANOMALIES: 'anomalies'
};

// Filtres de stock
export const STOCK_FILTERS = {
  ALL: 'all',
  LOW_STOCK: 'low_stock',
  REORDER: 'reorder',
  OVERSTOCK: 'overstock',
  CRITICAL: 'critical'
};

// Devises disponibles
export const CURRENCIES = [
  { code: 'EUR', symbol: '‚Ç¨', label: 'Euro' },
  { code: 'USD', symbol: '$', label: 'Dollar US' },
  { code: 'GBP', symbol: '¬£', label: 'Livre Sterling' }
];

// Valeurs par d√©faut des param√®tres
export const DEFAULT_PARAMETERS = {
  seuilSurstockProfond: 90,
  deviseDefaut: 'EUR',
  multiplicateurDefaut: 1.2
};

// Messages de validation
export const VALIDATION_MESSAGES = {
  REQUIRED_FIELD: 'Ce champ est obligatoire',
  INVALID_EMAIL: 'Email invalide',
  INVALID_NUMBER: 'Nombre invalide',
  MIN_VALUE: (min) => `La valeur doit √™tre sup√©rieure √† ${min}`,
  MAX_VALUE: (max) => `La valeur doit √™tre inf√©rieure √† ${max}`,
  DUPLICATE_NAME: 'Ce nom existe d√©j√†'
};

// Messages de succ√®s
export const SUCCESS_MESSAGES = {
  ORDER_CREATED: 'Commande cr√©√©e avec succ√®s !',
  ORDER_CONFIRMED: 'Commande confirm√©e !',
  ORDER_SHIPPED: 'Commande exp√©di√©e !',
  ORDER_RECEIVED: 'Commande re√ßue !',
  ORDER_COMPLETED: 'Commande compl√©t√©e !',
  STOCK_UPDATED: 'Stock mis √† jour !',
  SUPPLIER_CREATED: 'Fournisseur cr√©√© !',
  SUPPLIER_UPDATED: 'Fournisseur modifi√© !',
  SUPPLIER_DELETED: 'Fournisseur supprim√© !',
  WAREHOUSE_CREATED: 'Entrep√¥t cr√©√© !',
  WAREHOUSE_UPDATED: 'Entrep√¥t modifi√© !',
  WAREHOUSE_DELETED: 'Entrep√¥t supprim√© !',
  PARAMETER_SAVED: 'Param√®tre sauvegard√© !'
};

// Messages d'erreur
export const ERROR_MESSAGES = {
  LOADING_FAILED: 'Erreur lors du chargement des donn√©es',
  SAVE_FAILED: 'Erreur lors de la sauvegarde',
  DELETE_FAILED: 'Erreur lors de la suppression',
  NETWORK_ERROR: 'Probl√®me de connexion. V√©rifiez votre connexion Internet.',
  NOT_FOUND: '√âl√©ment introuvable',
  UNKNOWN_ERROR: 'Erreur inconnue'
};

// Configuration des intervalles de synchronisation
export const SYNC_INTERVALS = {
  AUTO_SYNC: 5 * 60 * 1000, // 5 minutes en millisecondes
  MANUAL_DEBOUNCE: 300 // 300ms pour debounce
};

// Limites d'affichage
export const DISPLAY_LIMITS = {
  MAX_DASHBOARD_ITEMS: 10,
  MAX_TABLE_ROWS_DEFAULT: 50,
  MAX_NOTIFICATIONS: 20
};

// Configuration des modals
export const MODAL_CONFIG = {
  ANIMATION_DURATION: 250, // ms
  BACKDROP_BLUR: true
};

// Formats de date
export const DATE_FORMATS = {
  DISPLAY: 'DD MMMM YYYY', // Ex: 14 octobre 2025
  API: 'YYYY-MM-DD', // Ex: 2025-10-14
  DATETIME_DISPLAY: 'DD/MM/YYYY HH:mm',
  DATETIME_API: 'YYYY-MM-DDTHH:mm:ss.SSSZ'
};
√âtape 2.2 : Cr√©er le Fichier d'Utilitaires de Date
Fichier : src/utils/dateUtils.js
javascript// ============================================
// UTILITAIRES DE DATE - Extraits de StockEasy.jsx
// ============================================

/**
 * Formate une date ISO en format fran√ßais lisible
 * @param {string} isoDate - Date ISO (ex: "2025-10-14T22:00:00.000Z")
 * @returns {string|null} - Ex: "14 octobre 2025" ou null si invalide
 */
export const formatConfirmedDate = (isoDate) => {
  if (!isoDate) {
    console.warn('formatConfirmedDate: date vide ou null');
    return null;
  }
  
  try {
    const date = new Date(isoDate);
    
    // V√©rifier que la date est valide
    if (isNaN(date.getTime())) {
      console.error('formatConfirmedDate: date invalide:', isoDate);
      return 'Date invalide';
    }
    
    return date.toLocaleDateString('fr-FR', {
      day: '2-digit',
      month: 'long',
      year: 'numeric'
    });
  } catch (error) {
    console.error('Erreur formatage date:', error, 'Date re√ßue:', isoDate);
    return 'Erreur de date';
  }
};

/**
 * Calcule le nombre de jours entre deux dates
 * @param {string|Date} date1 
 * @param {string|Date} date2 
 * @returns {number} - Nombre de jours
 */
export const daysBetween = (date1, date2) => {
  const d1 = new Date(date1);
  const d2 = new Date(date2);
  const diffTime = Math.abs(d2 - d1);
  return Math.floor(diffTime / (1000 * 60 * 60 * 24));
};

/**
 * Calcule les jours restants depuis une date d'exp√©dition
 * @param {string} shippedAt - Date d'exp√©dition
 * @param {number} leadTimeDays - D√©lai de livraison
 * @returns {number} - Jours restants
 */
export const calculateDaysRemaining = (shippedAt, leadTimeDays) => {
  if (!shippedAt) return leadTimeDays;
  
  const daysSinceShip = daysBetween(shippedAt, new Date());
  return Math.max(0, leadTimeDays - daysSinceShip);
};

/**
 * V√©rifie si une date est aujourd'hui
 * @param {string|Date} date 
 * @returns {boolean}
 */
export const isToday = (date) => {
  const today = new Date();
  const checkDate = new Date(date);
  return (
    checkDate.getDate() === today.getDate() &&
    checkDate.getMonth() === today.getMonth() &&
    checkDate.getFullYear() === today.getFullYear()
  );
};

/**
 * Formate une date pour l'API (YYYY-MM-DD)
 * @param {Date} date 
 * @returns {string}
 */
export const formatDateForAPI = (date) => {
  return date.toISOString().split('T')[0];
};
√âtape 2.3 : Mettre √† Jour StockEasy.jsx pour Utiliser les Constantes
CURSOR, dans StockEasy.jsx, ajoute ces imports en haut :
javascript// Ajouter ces imports apr√®s les autres imports
import {
  ORDER_STATUS_LABELS,
  ORDER_STATUS_LABELS_EMOJI,
  ORDER_STATUS_COLORS,
  DISCREPANCY_TYPES,
  MAIN_TABS,
  TRACK_TABS,
  STOCK_TABS,
  SETTINGS_TABS,
  ANALYTICS_TABS,
  AI_TABS,
  STOCK_FILTERS,
  CURRENCIES,
  DEFAULT_PARAMETERS,
  VALIDATION_MESSAGES,
  SUCCESS_MESSAGES,
  ERROR_MESSAGES,
  SYNC_INTERVALS,
  DISPLAY_LIMITS
} from './constants/stockEasyConstants';

import {
  formatConfirmedDate,
  daysBetween,
  calculateDaysRemaining,
  isToday,
  formatDateForAPI
} from './utils/dateUtils';
CURSOR, remplace ensuite toutes les valeurs hardcod√©es par les constantes import√©es.
Par exemple :

'dashboard' ‚Üí MAIN_TABS.DASHBOARD
'en_cours_commande' ‚Üí TRACK_TABS.EN_COURS_COMMANDE
'pending_confirmation' ‚Üí use ORDER_STATUS_LABELS
etc.

√âtape 2.4 : Tester
bash# Dans le terminal
npm run dev

# V√©rifier que l'application d√©marre
# Tester navigation entre les onglets
# V√©rifier que rien n'est cass√©
√âtape 2.5 : Commit
bashgit add src/constants/stockEasyConstants.js
git add src/utils/dateUtils.js
git add src/StockEasy.jsx
git commit -m "‚ôªÔ∏è Refactor: Extraction des constantes et utilitaires de date"
git push
‚úÖ CHECKPOINT 1 : Constantes extraites - Application fonctionnelle

üîµ PHASE 3 : EXTRACTION DU COMPOSANT BUTTON (30 min)
√âtape 3.1 : Cr√©er le Composant Button R√©utilisable
Fichier : src/components/shared/Button.jsx
javascriptimport React from 'react';
import { RefreshCw } from 'lucide-react';

/**
 * Composant Button unifi√© et r√©utilisable
 * Extrait de StockEasy.jsx
 */
export const Button = ({ 
  variant = 'primary', 
  size = 'md', 
  children, 
  className = '', 
  icon: Icon,
  loading = false,
  ...props 
}) => {
  const baseStyles = 'inline-flex items-center justify-center gap-2 font-semibold transition-all focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';
  
  const variants = {
    primary: 'bg-black text-white hover:bg-[#333333] focus:ring-black shadow-lg',
    secondary: 'bg-[#40403E] text-[#FAFAF7] hover:bg-[#666663] focus:ring-[#40403E]',
    ghost: 'bg-transparent text-black hover:bg-black/10 focus:ring-black',
    danger: 'bg-[#EF1C43] text-white hover:bg-red-700 focus:ring-[#EF1C43] shadow-sm',
    success: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-600 shadow-sm',
    outline: 'bg-transparent border-2 border-[#E5E4DF] text-[#191919] hover:bg-[#FAFAF7] focus:ring-black',
  };
  
  const sizes = {
    sm: 'px-3 py-1.5 text-xs rounded-md',
    md: 'px-4 py-2.5 text-sm rounded-lg',
    lg: 'px-6 py-3 text-base rounded-lg',
  };
  
  return (
    <button
      className={`${baseStyles} ${variants[variant]} ${sizes[size]} ${className}`}
      disabled={loading || props.disabled}
      {...props}
    >
      {loading ? <RefreshCw className="w-4 h-4 shrink-0 animate-spin" /> : Icon && <Icon className="w-4 h-4 shrink-0" />}
      {children}
    </button>
  );
};
√âtape 3.2 : Mettre √† Jour StockEasy.jsx
javascript// SUPPRIMER la d√©finition du composant Button de StockEasy.jsx
// (lignes ~70-95)

// AJOUTER cet import en haut
import { Button } from './components/shared/Button';
√âtape 3.3 : Tester et Commit
bashnpm run dev
# Tester tous les boutons de l'application

git add src/components/shared/Button.jsx
git add src/StockEasy.jsx
git commit -m "‚ôªÔ∏è Refactor: Extraction du composant Button r√©utilisable"
git push
‚úÖ CHECKPOINT 2 : Button extrait - Application fonctionnelle

üîµ PHASE 4 : CR√âATION DES HOOKS PERSONNALIS√âS (2h)
√âtape 4.1 : Hook useStockData
Fichier : src/hooks/useStockData.js
javascriptimport { useState, useEffect } from 'react';
import api from '../services/apiService';
import { toast } from 'sonner';

/**
 * Hook personnalis√© pour g√©rer les donn√©es de stock
 * Extrait de StockEasy.jsx
 */
export const useStockData = () => {
  const [loading, setLoading] = useState(true);
  const [syncing, setSyncing] = useState(false);
  const [products, setProducts] = useState([]);
  const [suppliers, setSuppliers] = useState({});
  const [warehouses, setWarehouses] = useState({});
  const [orders, setOrders] = useState([]);
  const [parameters, setParameters] = useState({});

  const loadData = async () => {
    try {
      setLoading(true);
      const data = await api.getAllData();
      
      // Construire suppliersMap
      const suppliersMap = {};
      data.suppliers.forEach(s => {
        suppliersMap[s.name] = s;
      });
      
      // Construire warehousesMap
      const warehousesMap = {};
      if (data.warehouses && Array.isArray(data.warehouses)) {
        data.warehouses.forEach(w => {
          warehousesMap[w.name] = w;
        });
      }
      
      setSuppliers(suppliersMap);
      setWarehouses(warehousesMap);
      setProducts(data.products);
      setOrders(data.orders);
      
      // Charger les param√®tres
      if (data.parameters) {
        setParameters(data.parameters);
      }
      
      console.log('‚úÖ Donn√©es charg√©es depuis Google Sheets');
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement:', error);
      toast.error('Erreur lors du chargement des donn√©es');
    } finally {
      setLoading(false);
    }
  };

  const syncData = async () => {
    try {
      setSyncing(true);
      await loadData();
      console.log('üîÑ Synchronisation effectu√©e');
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation:', error);
    } finally {
      setSyncing(false);
    }
  };

  useEffect(() => {
    loadData();
    const interval = setInterval(() => {
      syncData();
    }, 5 * 60 * 1000); // 5 minutes
    return () => clearInterval(interval);
  }, []);

  return {
    loading,
    syncing,
    products,
    suppliers,
    warehouses,
    orders,
    parameters,
    loadData,
    syncData,
    setProducts,
    setOrders,
    setSuppliers,
    setWarehouses,
    setParameters
  };
};
√âtape 4.2 : Hook useOrderManagement
Fichier : src/hooks/useOrderManagement.js
javascriptimport { useState } from 'react';
import api from '../services/apiService';
import { toast } from 'sonner';
import { formatDateForAPI } from '../utils/dateUtils';

/**
 * Hook pour g√©rer les actions sur les commandes
 * Extrait de StockEasy.jsx
 */
export const useOrderManagement = (loadData) => {
  const [orderQuantities, setOrderQuantities] = useState({});
  const [selectedWarehouse, setSelectedWarehouse] = useState(null);

  const updateOrderQuantity = (sku, newQuantity) => {
    const qty = parseInt(newQuantity, 10);
    setOrderQuantities(prev => ({
      ...prev,
      [sku]: isNaN(qty) || qty < 0 ? 0 : qty
    }));
  };

  const generatePONumber = (existingOrders) => {
    const poNumbers = existingOrders
      .map(o => {
        const match = o.id.match(/^PO-(\d+)$/);
        return match ? parseInt(match[1], 10) : 0;
      })
      .filter(n => n > 0);
    
    const nextNumber = poNumbers.length > 0 ? Math.max(...poNumbers) + 1 : 1;
    return `PO-${String(nextNumber).padStart(3, '0')}`;
  };

  const confirmOrder = async (orderId) => {
    try {
      const confirmedAt = new Date().toISOString();
      await api.updateOrderStatus(orderId, {
        status: 'preparing',
        confirmedAt: confirmedAt
      });
      await loadData();
      toast.success('Commande confirm√©e !');
    } catch (error) {
      console.error('‚ùå Erreur confirmation:', error);
      toast.error('Erreur lors de la confirmation');
    }
  };

  const shipOrder = async (orderId) => {
    const tracking = prompt('Entrez le num√©ro de suivi (optionnel):');
    try {
      await api.updateOrderStatus(orderId, {
        status: 'in_transit',
        shippedAt: formatDateForAPI(new Date()),
        trackingNumber: tracking || ''
      });
      await loadData();
      toast.success('Commande exp√©di√©e !');
    } catch (error) {
      console.error('‚ùå Erreur:', error);
      toast.error('Erreur lors de la mise √† jour');
    }
  };

  const receiveOrder = async (orderId) => {
    try {
      await api.updateOrderStatus(orderId, {
        status: 'received',
        receivedAt: formatDateForAPI(new Date())
      });
      await loadData();
      toast.success('Commande re√ßue !');
    } catch (error) {
      console.error('‚ùå Erreur:', error);
      toast.error('Erreur lors de la r√©ception');
    }
  };

  return {
    orderQuantities,
    setOrderQuantities,
    selectedWarehouse,
    setSelectedWarehouse,
    updateOrderQuantity,
    generatePONumber,
    confirmOrder,
    shipOrder,
    receiveOrder
  };
};
√âtape 4.3 : Hook useSupplierManagement
Fichier : src/hooks/useSupplierManagement.js
javascriptimport { useState } from 'react';
import api from '../services/apiService';
import { toast } from 'sonner';

/**
 * Hook pour g√©rer les fournisseurs
 * Extrait de StockEasy.jsx
 */
export const useSupplierManagement = (suppliers, loadData) => {
  const [supplierModalOpen, setSupplierModalOpen] = useState(false);
  const [editingSupplier, setEditingSupplier] = useState(null);
  const [supplierFormData, setSupplierFormData] = useState({
    name: '',
    email: '',
    leadTimeDays: 30,
    moq: 50,
    notes: ''
  });

  const handleOpenSupplierModal = (supplier = null) => {
    if (supplier) {
      setEditingSupplier(supplier);
      setSupplierFormData({
        name: supplier.name,
        email: supplier.email,
        leadTimeDays: supplier.leadTimeDays,
        moq: supplier.moq || 50,
        notes: supplier.notes || ''
      });
    } else {
      setEditingSupplier(null);
      setSupplierFormData({
        name: '',
        email: '',
        leadTimeDays: 30,
        moq: 50,
        notes: ''
      });
    }
    setSupplierModalOpen(true);
  };

  const handleCloseSupplierModal = () => {
    setSupplierModalOpen(false);
    setEditingSupplier(null);
    setSupplierFormData({
      name: '',
      email: '',
      leadTimeDays: 30,
      moq: 50,
      notes: ''
    });
  };

  const handleSupplierFormChange = (field, value) => {
    setSupplierFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const validateSupplierForm = () => {
    const errors = [];
    
    if (!supplierFormData.name.trim()) {
      errors.push('Le nom du fournisseur est obligatoire');
    }
    
    if (!supplierFormData.email.trim()) {
      errors.push('L\'email est obligatoire');
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(supplierFormData.email)) {
      errors.push('L\'email n\'est pas valide');
    }
    
    if (supplierFormData.leadTimeDays <= 0) {
      errors.push('Le d√©lai doit √™tre sup√©rieur √† 0');
    }
    
    if (supplierFormData.moq <= 0) {
      errors.push('Le MOQ doit √™tre sup√©rieur √† 0');
    }
    
    if (!editingSupplier) {
      const existingSupplier = Object.values(suppliers).find(
        s => s.name.toLowerCase() === supplierFormData.name.toLowerCase()
      );
      if (existingSupplier) {
        errors.push('Un fournisseur avec ce nom existe d√©j√†');
      }
    }
    
    return errors;
  };

  const handleSaveSupplier = async () => {
    const errors = validateSupplierForm();
    
    if (errors.length > 0) {
      toast.error('Erreurs : ' + errors.join(', '));
      return;
    }
    
    try {
      if (editingSupplier) {
        await api.updateSupplier(editingSupplier.name, supplierFormData);
        toast.success('Fournisseur mis √† jour !');
      } else {
        await api.createSupplier(supplierFormData);
        toast.success('Fournisseur cr√©√© !');
      }
      
      await loadData();
      handleCloseSupplierModal();
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde fournisseur:', error);
      toast.error('Erreur lors de la sauvegarde');
    }
  };

  const handleDeleteSupplier = async (supplier) => {
    try {
      await api.deleteSupplier(supplier.name);
      toast.success('Fournisseur supprim√© !');
      await loadData();
    } catch (error) {
      console.error('‚ùå Erreur suppression fournisseur:', error);
      toast.error('Erreur lors de la suppression');
    }
  };

  return {
    supplierModalOpen,
    editingSupplier,
    supplierFormData,
    handleOpenSupplierModal,
    handleCloseSupplierModal,
    handleSupplierFormChange,
    handleSaveSupplier,
    handleDeleteSupplier
  };
};
CURSOR : Continue de cr√©er les autres hooks suivants :

useWarehouseManagement.js
useParametersManagement.js
useReconciliation.js
useStockFilters.js

√âtape 4.4 : Mettre √† Jour StockEasy.jsx pour Utiliser les Hooks
javascript// En haut de StockEasy.jsx, ajouter les imports de hooks
import { useStockData } from './hooks/useStockData';
import { useOrderManagement } from './hooks/useOrderManagement';
import { useSupplierManagement } from './hooks/useSupplierManagement';
// ... autres hooks

// Dans le composant StockEasy, remplacer les √©tats et fonctions par les hooks
function StockEasy() {
  // ... auth et navigation
  
  // Hook pour les donn√©es
  const {
    loading,
    syncing,
    products,
    suppliers,
    warehouses,
    orders,
    parameters,
    loadData,
    syncData
  } = useStockData();
  
  // Hook pour la gestion des commandes
  const {
    orderQuantities,
    setOrderQuantities,
    selectedWarehouse,
    setSelectedWarehouse,
    updateOrderQuantity,
    generatePONumber,
    confirmOrder,
    shipOrder,
    receiveOrder
  } = useOrderManagement(loadData);
  
  // Hook pour la gestion des fournisseurs
  const {
    supplierModalOpen,
    editingSupplier,
    supplierFormData,
    handleOpenSupplierModal,
    handleCloseSupplierModal,
    handleSupplierFormChange,
    handleSaveSupplier,
    handleDeleteSupplier
  } = useSupplierManagement(suppliers, loadData);
  
  // ... reste du code
}
√âtape 4.5 : Tester et Commit
bashnpm run dev
# Tester TOUTES les fonctionnalit√©s

git add src/hooks/
git add src/StockEasy.jsx
git commit -m "‚ôªÔ∏è Refactor: Extraction des hooks personnalis√©s"
git push
‚úÖ CHECKPOINT 3 : Hooks extraits - Application fonctionnelle

üîµ PHASE 5 : EXTRACTION DES COMPOSANTS DASHBOARD (1h30)
√âtape 5.1 : Cr√©er les Composants Dashboard
Fichier : src/components/dashboard/ProductsToOrder.jsx
javascriptimport React from 'react';
import { motion } from 'framer-motion';
import { AlertCircle } from 'lucide-react';
import { InfoTooltip, tooltips } from '../ui/InfoTooltip';
import { formatUnits } from '../../utils/decimalUtils';

export const ProductsToOrder = ({ products }) => {
  return (
    <div className="bg-white rounded-xl shadow-sm border border-[#E5E4DF] p-6">
      <div className="flex items-center gap-2 mb-4">
        <div className="w-10 h-10 bg-red-50 rounded-lg flex items-center justify-center border border-red-200 shrink-0">
          <AlertCircle className="w-6 h-6 text-[#EF1C43] shrink-0" />
        </div>
        <div className="flex-1 min-w-0">
          <div className="flex items-center">
            <h2 className="text-lg font-bold text-[#191919]">Produits √† commander</h2>
            <InfoTooltip content={tooltips.toOrder} />
          </div>
          <p className="text-sm text-[#666663]">{products.length} produit(s)</p>
        </div>
      </div>
      <div className="space-y-2 max-h-96 overflow-y-auto">
        {products.length === 0 ? (
          <p className="text-[#666663] text-center py-8 text-sm">Rien √† commander</p>
        ) : (
          products.map((p, index) => (
            <motion.div
              key={p.sku}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.03, duration: 0.3 }}
              className="flex justify-between items-center p-3 bg-[#FAFAF7] rounded-lg hover:bg-[#F0F0EB] transition-colors border border-[#E5E4DF]">
              <div className="min-w-0">
                <p className="font-medium text-[#191919] text-sm truncate">{p.name}</p>
                <p className="text-xs text-[#666663] truncate">{p.supplier}</p>
              </div>
              <div className="text-right shrink-0 ml-4">
                <p className="font-bold text-[#EF1C43] text-sm">{formatUnits(p.qtyToOrder)} unit√©s</p>
                <p className="text-xs text-[#666663]">Stock: {formatUnits(p.stock)}</p>
              </div>
            </motion.div>
          ))
        )}
      </div>
    </div>
  );
};
CURSOR : Cr√©e les composants suivants de la m√™me mani√®re :

ProductsToWatch.jsx
InTransit.jsx
ReceivedOrders.jsx

√âtape 5.2 : Cr√©er le Composant DashboardTab
Fichier : src/components/dashboard/DashboardTab.jsx
javascriptimport React from 'react';
import { motion } from 'framer-motion';
import { ProductsToOrder } from './ProductsToOrder';
import { ProductsToWatch } from './ProductsToWatch';
import { InTransit } from './InTransit';
import { ReceivedOrders } from './ReceivedOrders';

export const DashboardTab = ({ productsByStatus, orders, setActiveTab, setTrackTabSection }) => {
  return (
    <motion.div
      key="dashboard"
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: -20 }}
      transition={{ duration: 0.25 }}
      className="grid grid-cols-1 lg:grid-cols-2 gap-6"
    >
      <ProductsToOrder products={productsByStatus.to_order} />
      <ProductsToWatch products={productsByStatus.watch} />
      <InTransit orders={orders} setActiveTab={setActiveTab} setTrackTabSection={setTrackTabSection} />
      <ReceivedOrders orders={orders} setActiveTab={setActiveTab} setTrackTabSection={setTrackTabSection} />
    </motion.div>
  );
};
√âtape 5.3 : Mettre √† Jour StockEasy.jsx
javascript// Importer le composant Dashboard
import { DashboardTab } from './components/dashboard/DashboardTab';

// Dans le JSX, remplacer la section DASHBOARD TAB par :
{activeTab === 'dashboard' && (
  <DashboardTab 
    productsByStatus={productsByStatus}
    orders={orders}
    setActiveTab={setActiveTab}
    setTrackTabSection={setTrackTabSection}
  />
)}
√âtape 5.4 : Tester et Commit
bashnpm run dev
# Tester l'onglet Dashboard

git add src/components/dashboard/
git add src/StockEasy.jsx
git commit -m "‚ôªÔ∏è Refactor: Extraction des composants Dashboard"
git push
‚úÖ CHECKPOINT 4 : Dashboard extrait - Application fonctionnelle

üìä R√âSUM√â DE PROGRESSION
Apr√®s ces 5 phases, votre fichier StockEasy.jsx aura :

‚úÖ Pass√© de 3876 lignes √† environ 2500 lignes (-35%)
‚úÖ Extrait les constantes dans un fichier s√©par√©
‚úÖ Extrait les utilitaires de date
‚úÖ Extrait le composant Button
‚úÖ Cr√©√© 5+ hooks personnalis√©s
‚úÖ Extrait l'onglet Dashboard complet


üéØ PHASES SUIVANTES (√Ä CONTINUER)
Phase 6 : Extraction des Composants Actions (2h)
Phase 7 : Extraction des Composants Track (3h)
Phase 8 : Extraction des Composants Stock (2h)
Phase 9 : Extraction des Composants Analytics (2h)
Phase 10 : Nettoyage Final et Documentation (1h)

üìå NOTES IMPORTANTES POUR CURSOR
CURSOR, voici tes instructions :

Commence par la Phase 1 - Ne saute AUCUNE √©tape
Teste APR√àS CHAQUE modification
Commit APR√àS chaque √©tape valid√©e
Si quelque chose casse ‚Üí ROLLBACK imm√©diat
Documente chaque changement dans docs/refactoring/logs/REFACTORING_LOG.md
Demande validation √† l'utilisateur avant de passer √† la phase suivante

Format des logs :
markdown## Phase X - [Nom de la phase]
**Date** : [Date]
**Dur√©e** : [Dur√©e]
**Fichiers modifi√©s** :
- [Liste des fichiers]
**Changements** :
- [Description des changements]
**Tests** :
- ‚úÖ [Tests effectu√©s]
**Commit** : [Hash du commit]
**Statut** : ‚úÖ Valid√©