#!/bin/bash

# üöÄ Script d'Am√©lioration Automatique - Stock Easy App
# Usage: ./improve-stock-easy.sh

set -e  # Exit on error

# Couleurs pour output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Banner
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë  üöÄ Stock Easy App - Auto-Improvement       ‚ïë"
echo "‚ïë  Version 1.0 - 17 octobre 2025              ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# V√©rifier qu'on est dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    log_error "package.json not found. Make sure you're in stock-easy-app directory"
    exit 1
fi

log_info "R√©pertoire de travail: $(pwd)"
echo ""

# ========================================
# PHASE 1: MISE √Ä JOUR DES D√âPENDANCES
# ========================================
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üì¶ PHASE 1: Mise √† jour des d√©pendances"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

log_info "V√©rification des vuln√©rabilit√©s..."
npm audit || true
echo ""

read -p "‚ùì Voulez-vous mettre √† jour les d√©pendances? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Mise √† jour des d√©pendances..."
    npm update
    log_success "D√©pendances mises √† jour"
    
    log_info "Correction des vuln√©rabilit√©s..."
    npm audit fix || true
    log_success "Vuln√©rabilit√©s corrig√©es (si possible)"
    
    log_info "Test du build..."
    if npm run build; then
        log_success "Build r√©ussi ‚ú®"
    else
        log_error "Build √©chou√©. V√©rifiez les erreurs ci-dessus."
        exit 1
    fi
else
    log_warning "Mise √† jour des d√©pendances ignor√©e"
fi

echo ""

# ========================================
# PHASE 2: S√âCURISATION API URL
# ========================================
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üîê PHASE 2: S√©curisation de l'API URL"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

if [ ! -f ".env" ]; then
    log_warning "Fichier .env non trouv√©"
    read -p "‚ùì Cr√©er .env depuis .env.example? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cp .env.example .env
        log_success ".env cr√©√©"
        log_warning "‚ö†Ô∏è  IMPORTANT: √âditez .env et ajoutez votre VITE_API_URL"
        echo ""
        read -p "Appuyez sur Entr√©e apr√®s avoir √©dit√© .env..." 
    fi
else
    log_success "Fichier .env existe d√©j√†"
fi

# V√©rifier que .env est dans .gitignore
if ! grep -q "^\.env$" .gitignore 2>/dev/null; then
    log_warning ".env n'est pas dans .gitignore"
    echo ".env" >> .gitignore
    log_success ".env ajout√© au .gitignore"
fi

echo ""

# ========================================
# PHASE 3: INFRASTRUCTURE DE TESTS
# ========================================
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üß™ PHASE 3: Infrastructure de tests"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

read -p "‚ùì Installer Vitest et Testing Library? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Installation de Vitest..."
    npm install -D vitest @testing-library/react @testing-library/jest-dom jsdom
    
    log_info "Cr√©ation de vitest.config.js..."
    cat > vitest.config.js << 'EOF'
import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/test/setup.js',
  },
});
EOF
    
    log_info "Cr√©ation du fichier setup..."
    mkdir -p src/test
    cat > src/test/setup.js << 'EOF'
import { expect, afterEach } from 'vitest';
import { cleanup } from '@testing-library/react';
import * as matchers from '@testing-library/jest-dom/matchers';

expect.extend(matchers);

afterEach(() => {
  cleanup();
});
EOF

    log_info "Ajout des scripts de test au package.json..."
    npm pkg set scripts.test="vitest"
    npm pkg set scripts.test:ui="vitest --ui"
    npm pkg set scripts.test:coverage="vitest --coverage"
    
    log_success "Infrastructure de tests install√©e ‚ú®"
else
    log_warning "Installation des tests ignor√©e"
fi

echo ""

# ========================================
# PHASE 4: CR√âATION DE TESTS EXEMPLES
# ========================================
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üìù PHASE 4: Tests exemples"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

if [ -f "vitest.config.js" ]; then
    read -p "‚ùì Cr√©er des tests exemples pour utils/calculations.js? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        mkdir -p src/utils/__tests__
        
        log_info "Cr√©ation de calculations.test.js..."
        cat > src/utils/__tests__/calculations.test.js << 'EOF'
import { describe, it, expect } from 'vitest';
import { calculateMetrics, calculateReorderPoint } from '../calculations';

describe('calculateMetrics', () => {
  it('should calculate days of stock correctly', () => {
    const product = {
      stock: 100,
      salesPerDay: 10,
      leadTimeDays: 14,
    };
    
    const result = calculateMetrics(product);
    expect(result.daysOfStock).toBe(10);
  });

  it('should mark as urgent when stock is critically low', () => {
    const product = {
      stock: 5,
      salesPerDay: 10,
      leadTimeDays: 14,
    };
    
    const result = calculateMetrics(product);
    expect(result.healthStatus).toBe('urgent');
    expect(result.healthPercentage).toBeLessThan(30);
  });

  it('should handle zero sales per day', () => {
    const product = {
      stock: 100,
      salesPerDay: 0,
      leadTimeDays: 14,
    };
    
    const result = calculateMetrics(product);
    expect(result.daysOfStock).toBe(999);
  });
});

describe('calculateReorderPoint', () => {
  it('should calculate reorder point correctly', () => {
    const product = {
      salesPerDay: 10,
      leadTimeDays: 14,
      customSecurityStock: 5,
    };
    
    const reorderPoint = calculateReorderPoint(product);
    expect(reorderPoint).toBeGreaterThan(0);
  });
});
EOF
        
        log_success "Tests cr√©√©s"
        
        log_info "Lancement des tests..."
        if npm test; then
            log_success "Tests passent avec succ√®s! üéâ"
        else
            log_warning "Certains tests ont √©chou√© (normal si premier lancement)"
        fi
    fi
else
    log_warning "Vitest non install√©, tests ignor√©s"
fi

echo ""

# ========================================
# PHASE 5: DOCUMENTATION
# ========================================
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üìö PHASE 5: Documentation"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

read -p "‚ùì Cr√©er/Mettre √† jour la documentation? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    mkdir -p docs
    
    if [ ! -f "docs/ARCHITECTURE.md" ]; then
        log_info "Cr√©ation de ARCHITECTURE.md..."
        cat > docs/ARCHITECTURE.md << 'EOF'
# Architecture - Stock Easy App

## Vue d'Ensemble

Stock Easy est une application React de gestion de stock connect√©e √† Google Apps Script.

## Stack Technique

- **Frontend**: React 18 + Vite 5
- **Styling**: Tailwind CSS 3
- **Backend**: Google Apps Script (API REST)
- **Hosting**: Vercel

## Structure Actuelle

```
stock-easy-app/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ StockEasy.jsx          ‚ö†Ô∏è Fichier monolithique (5,057 lignes)
‚îÇ   ‚îú‚îÄ‚îÄ components/            Composants UI
‚îÇ   ‚îú‚îÄ‚îÄ services/              API Service
‚îÇ   ‚îú‚îÄ‚îÄ hooks/                 Custom Hooks
‚îÇ   ‚îî‚îÄ‚îÄ utils/                 Fonctions utilitaires
```

## Variables d'Environnement

- `VITE_API_URL`: URL de l'API Google Apps Script

## D√©ploiement

- Production: Vercel auto-deploy sur push vers main
- Root Directory: `stock-easy-app`

Pour plus de d√©tails, voir les autres docs dans le dossier docs/
EOF
        log_success "ARCHITECTURE.md cr√©√©"
    else
        log_info "ARCHITECTURE.md existe d√©j√†"
    fi
    
    if [ ! -f "docs/CONTRIBUTING.md" ]; then
        log_info "Cr√©ation de CONTRIBUTING.md..."
        cat > docs/CONTRIBUTING.md << 'EOF'
# Guide de Contribution

## Installation

```bash
npm install
cp .env.example .env
# √âditer .env avec votre VITE_API_URL
npm run dev
```

## Conventions

### Commits
Format: `<type>: <description>`

Types: feat, fix, refactor, chore, docs, test, perf

### Code Style
- Indentation: 2 espaces
- Quotes: Simple quotes
- Semicolons: Oui

## Tests

```bash
npm test              # Lancer les tests
npm run test:coverage # Avec coverage
```

## D√©ploiement

Les pushes sur `main` d√©ploient automatiquement sur Vercel.
EOF
        log_success "CONTRIBUTING.md cr√©√©"
    else
        log_info "CONTRIBUTING.md existe d√©j√†"
    fi
else
    log_warning "Documentation ignor√©e"
fi

echo ""

# ========================================
# PHASE 6: GIT COMMIT
# ========================================
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üîÑ PHASE 6: Git Commit"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# V√©rifier s'il y a des changements
if git diff --quiet && git diff --cached --quiet; then
    log_info "Aucun changement √† commiter"
else
    log_info "Changements d√©tect√©s:"
    git status --short
    echo ""
    
    read -p "‚ùì Commiter ces changements? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git add .
        
        # G√©n√©rer message de commit
        COMMIT_MSG="chore: Auto-improvement script run

- Updated dependencies
- Secured API configuration
- Setup test infrastructure
- Created documentation

Generated by improve-stock-easy.sh"
        
        git commit -m "$COMMIT_MSG"
        log_success "Changements commit√©s"
        
        read -p "‚ùì Pusher vers GitHub? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git push origin main
            log_success "Changements push√©s vers GitHub"
        else
            log_warning "Push ignor√© (vous pouvez le faire manuellement plus tard)"
        fi
    fi
fi

echo ""

# ========================================
# R√âSUM√â FINAL
# ========================================
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë  ‚ú® Script termin√© avec succ√®s!             ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

log_success "Am√©liorations appliqu√©es:"
echo "  ‚úÖ D√©pendances √† jour"
echo "  ‚úÖ Configuration API s√©curis√©e"
echo "  ‚úÖ Infrastructure de tests en place"
echo "  ‚úÖ Documentation cr√©√©e"
echo ""

log_info "Prochaines √©tapes recommand√©es:"
echo "  1. V√©rifier que .env contient la bonne VITE_API_URL"
echo "  2. Configurer les variables d'environnement dans Vercel"
echo "  3. Tester l'application: npm run dev"
echo "  4. Commencer le refactoring de StockEasy.jsx"
echo ""

log_info "Ressources:"
echo "  üìÑ Audit complet: STOCK_EASY_APP_AUDIT_COMPLET.md"
echo "  üìã Plan d'action: PLAN_ACTION_EXECUTABLE.md"
echo "  üìÅ Documentation: docs/"
echo ""

log_success "Bonne chance avec le refactoring! üöÄ"
