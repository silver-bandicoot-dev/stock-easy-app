/**
 * Script de test complet pour toutes les fonctionnalit√©s de l'API
 * 
 * Ce script peut √™tre ex√©cut√© dans la console du navigateur pour tester
 * toutes les op√©rations API de l'application Stock Easy.
 */

import api from '../services/apiService';

/**
 * Ex√©cute tous les tests API
 */
export async function runFullApiTests() {
  console.log('üöÄ D√âMARRAGE DES TESTS API COMPLETS\n');
  console.log('='.repeat(60));
  
  const results = {
    passed: 0,
    failed: 0,
    tests: []
  };

  // Test 1: R√©cup√©rer toutes les donn√©es
  await runTest('1. R√©cup√©rer toutes les donn√©es', async () => {
    const data = await api.getAllData();
    if (!data.products || !data.suppliers || !data.orders) {
      throw new Error('Structure de donn√©es invalide');
    }
    console.log(`   ‚úì ${data.products.length} produits`);
    console.log(`   ‚úì ${data.suppliers.length} fournisseurs`);
    console.log(`   ‚úì ${data.orders.length} commandes`);
    return data;
  }, results);

  // Test 2: Cr√©er un fournisseur de test
  await runTest('2. Cr√©er un fournisseur de test', async () => {
    const supplierData = {
      name: `Test Supplier ${Date.now()}`,
      email: 'test@example.com',
      leadTimeDays: 7,
      moq: 10,
      notes: 'Fournisseur de test cr√©√© automatiquement'
    };
    const result = await api.createSupplier(supplierData);
    console.log(`   ‚úì Fournisseur cr√©√©: ${supplierData.name}`);
    return result;
  }, results);

  // Test 3: Mettre √† jour un produit (si disponible)
  await runTest('3. Mettre √† jour un produit', async () => {
    const allData = await api.getAllData();
    if (allData.products.length === 0) {
      throw new Error('Aucun produit disponible pour le test');
    }
    
    const product = allData.products[0];
    const result = await api.updateProduct(product.sku, {
      multiplier: 1.5
    });
    console.log(`   ‚úì Produit ${product.sku} mis √† jour`);
    return result;
  }, results);

  // Test 4: Cr√©er une commande de test
  await runTest('4. Cr√©er une commande de test', async () => {
    const allData = await api.getAllData();
    if (allData.products.length === 0 || allData.suppliers.length === 0) {
      throw new Error('Donn√©es insuffisantes pour cr√©er une commande');
    }
    
    const product = allData.products[0];
    const supplier = allData.suppliers[0];
    
    const orderData = {
      id: `TEST-${Date.now()}`,
      supplier: supplier.name,
      status: 'pending',
      total: product.buyPrice * 10,
      createdAt: new Date().toISOString(),
      items: [
        {
          sku: product.sku,
          quantity: 10,
          pricePerUnit: product.buyPrice
        }
      ]
    };
    
    const result = await api.createOrder(orderData);
    console.log(`   ‚úì Commande cr√©√©e: ${orderData.id}`);
    return { ...result, orderId: orderData.id };
  }, results);

  // Test 5: Confirmer une commande
  await runTest('5. Confirmer une commande', async (previousResult) => {
    const orderId = previousResult?.orderId;
    if (!orderId) {
      throw new Error('Pas de commande √† confirmer');
    }
    
    const result = await api.updateOrderStatus(orderId, {
      status: 'confirmed',
      confirmedAt: new Date().toISOString()
    });
    console.log(`   ‚úì Commande confirm√©e: ${orderId}`);
    return result;
  }, results, results.tests[3]?.result);

  // Test 6: Marquer comme exp√©di√©e
  await runTest('6. Marquer commande comme exp√©di√©e', async (previousResult) => {
    const orderId = results.tests[3]?.result?.orderId;
    if (!orderId) {
      throw new Error('Pas de commande √† exp√©dier');
    }
    
    const result = await api.updateOrderStatus(orderId, {
      status: 'shipped',
      shippedAt: new Date().toISOString(),
      trackingNumber: `TRACK-${Date.now()}`
    });
    console.log(`   ‚úì Commande exp√©di√©e: ${orderId}`);
    return result;
  }, results);

  // Test 7: Recevoir avec √©carts
  await runTest('7. Recevoir commande avec √©carts', async () => {
    const orderId = results.tests[3]?.result?.orderId;
    if (!orderId) {
      throw new Error('Pas de commande √† recevoir');
    }
    
    const allData = await api.getAllData();
    const order = allData.orders.find(o => o.id === orderId);
    
    const result = await api.updateOrderStatus(orderId, {
      status: 'received',
      receivedAt: new Date().toISOString(),
      hasDiscrepancy: true,
      damageReport: true,
      items: order.items.map(item => ({
        sku: item.sku,
        receivedQuantity: item.quantity - 2, // 2 articles manquants
        discrepancyType: 'damaged',
        discrepancyNotes: '2 articles endommag√©s lors du transport'
      }))
    });
    console.log(`   ‚úì Commande re√ßue avec √©carts: ${orderId}`);
    return result;
  }, results);

  // Test 8: Mettre √† jour le stock
  await runTest('8. Mettre √† jour le stock', async () => {
    const allData = await api.getAllData();
    if (allData.products.length === 0) {
      throw new Error('Aucun produit pour mettre √† jour le stock');
    }
    
    const product = allData.products[0];
    const result = await api.updateStock([
      {
        sku: product.sku,
        quantityToAdd: 5
      }
    ]);
    console.log(`   ‚úì Stock mis √† jour pour ${product.sku}: +5 unit√©s`);
    return result;
  }, results);

  // Test 9: Lire un param√®tre
  await runTest('9. Lire un param√®tre de configuration', async () => {
    const value = await api.getParameter('MultiplicateurDefaut');
    console.log(`   ‚úì MultiplicateurDefaut = ${value}`);
    return { value };
  }, results);

  // Test 10: Mettre √† jour un param√®tre
  await runTest('10. Mettre √† jour un param√®tre', async () => {
    const result = await api.updateParameter('SeuilSurstockProfond', 95);
    console.log(`   ‚úì SeuilSurstockProfond mis √† jour √† 95`);
    return result;
  }, results);

  // Afficher le r√©sum√©
  console.log('\n' + '='.repeat(60));
  console.log('üìä R√âSUM√â DES TESTS\n');
  console.log(`‚úÖ Tests r√©ussis: ${results.passed}`);
  console.log(`‚ùå Tests √©chou√©s: ${results.failed}`);
  console.log(`üìà Taux de r√©ussite: ${Math.round((results.passed / (results.passed + results.failed)) * 100)}%`);
  
  if (results.failed > 0) {
    console.log('\n‚ö†Ô∏è Tests √©chou√©s:');
    results.tests
      .filter(t => !t.passed)
      .forEach(t => console.log(`   - ${t.name}: ${t.error}`));
  }
  
  console.log('\n' + '='.repeat(60));
  
  return results;
}

/**
 * Ex√©cute un test individuel
 */
async function runTest(name, testFn, results, previousResult) {
  console.log(`\nüß™ ${name}...`);
  
  try {
    const result = await testFn(previousResult);
    console.log('   ‚úÖ R√©ussi');
    results.passed++;
    results.tests.push({ name, passed: true, result });
    return result;
  } catch (error) {
    console.error(`   ‚ùå √âchou√©: ${error.message}`);
    results.failed++;
    results.tests.push({ name, passed: false, error: error.message });
    return null;
  }
}

/**
 * Tests rapides de base (pour v√©rification rapide)
 */
export async function runQuickTests() {
  console.log('‚ö° TESTS RAPIDES\n');
  
  try {
    // Test 1: Connexion
    console.log('1. Test de connexion...');
    const data = await api.getAllData();
    console.log(`   ‚úÖ ${data.products?.length || 0} produits charg√©s`);
    
    // Test 2: Param√®tre
    console.log('\n2. Test param√®tre...');
    const param = await api.getParameter('DeviseDefaut');
    console.log(`   ‚úÖ Devise: ${param}`);
    
    console.log('\n‚ú® Tests rapides termin√©s avec succ√®s!');
    return true;
  } catch (error) {
    console.error('\n‚ùå Erreur:', error.message);
    return false;
  }
}

// Export par d√©faut
export default {
  runFullApiTests,
  runQuickTests
};
