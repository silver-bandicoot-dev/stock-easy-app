import { db } from '../config/firebase';
import { collection, doc, setDoc, query, where, orderBy, getDocs, Timestamp } from 'firebase/firestore';

/**
 * Sauvegarde un snapshot quotidien des KPIs dans Firestore
 * @param {string} companyId - ID de l'entreprise
 * @param {object} kpiData - Donn√©es KPI √† sauvegarder
 * @returns {Promise<void>}
 */
export async function saveKPISnapshot(companyId, kpiData) {
  try {
    console.log('üìä saveKPISnapshot - D√©but de sauvegarde pour companyId:', companyId);
    
    // Cr√©er la date du jour au format YYYY-MM-DD
    const today = new Date();
    const dateString = today.toISOString().split('T')[0];
    
    console.log('üìÖ Date du snapshot:', dateString);
    
    // Structure du snapshot
    const snapshot = {
      date: Timestamp.fromDate(today),
      skuAvailabilityRate: kpiData.skuAvailabilityRate || 0,
      availableSKUs: kpiData.availableSKUs || 0,
      totalSKUs: kpiData.totalSKUs || 0,
      salesLostAmount: kpiData.salesLostAmount || 0,
      salesLostCount: kpiData.salesLostCount || 0,
      overstockCost: kpiData.overstockCost || 0,
      overstockSKUs: kpiData.overstockSKUs || 0,
      inventoryValuation: kpiData.inventoryValuation || 0,
      createdAt: Timestamp.now()
    };
    
    console.log('üì¶ Donn√©es du snapshot:', snapshot);
    
    // R√©f√©rence du document
    const snapshotRef = doc(db, 'companies', companyId, 'kpi_history', dateString);
    
    // Sauvegarder dans Firestore
    await setDoc(snapshotRef, snapshot, { merge: true });
    
    console.log('‚úÖ Snapshot sauvegard√© avec succ√®s:', dateString);
    
    return { success: true, date: dateString };
  } catch (error) {
    console.error('‚ùå Erreur lors de la sauvegarde du snapshot KPI:', error);
    throw error;
  }
}

/**
 * R√©cup√®re l'historique des KPIs pour une p√©riode donn√©e
 * @param {string} companyId - ID de l'entreprise
 * @param {Date} startDate - Date de d√©but
 * @param {Date} endDate - Date de fin
 * @returns {Promise<Array>} Tableau d'objets KPI tri√©s par date
 */
export async function getKPIHistory(companyId, startDate, endDate) {
  try {
    console.log('üìä getKPIHistory - R√©cup√©ration historique pour companyId:', companyId);
    console.log('üìÖ P√©riode:', startDate, '√†', endDate);
    
    // R√©f√©rence de la collection
    const historyRef = collection(db, 'companies', companyId, 'kpi_history');
    
    // Cr√©er la query avec filtres de dates
    const startTimestamp = Timestamp.fromDate(startDate);
    const endTimestamp = Timestamp.fromDate(endDate);
    
    const q = query(
      historyRef,
      where('date', '>=', startTimestamp),
      where('date', '<=', endTimestamp),
      orderBy('date', 'asc')
    );
    
    console.log('üîç Ex√©cution de la requ√™te Firestore...');
    
    // Ex√©cuter la requ√™te
    const querySnapshot = await getDocs(q);
    
    console.log('üìà Nombre de snapshots r√©cup√©r√©s:', querySnapshot.size);
    
    // Transformer les documents en objets
    const history = [];
    querySnapshot.forEach((doc) => {
      const data = doc.data();
      history.push({
        id: doc.id,
        date: data.date.toDate(),
        dateString: doc.id, // Le document ID est d√©j√† au format YYYY-MM-DD
        skuAvailabilityRate: data.skuAvailabilityRate || 0,
        availableSKUs: data.availableSKUs || 0,
        totalSKUs: data.totalSKUs || 0,
        salesLostAmount: data.salesLostAmount || 0,
        salesLostCount: data.salesLostCount || 0,
        overstockCost: data.overstockCost || 0,
        overstockSKUs: data.overstockSKUs || 0,
        inventoryValuation: data.inventoryValuation || 0
      });
    });
    
    console.log('‚úÖ Historique r√©cup√©r√©:', history.length, 'entr√©es');
    if (history.length > 0) {
      console.log('üìä Premier snapshot:', history[0]);
      console.log('üìä Dernier snapshot:', history[history.length - 1]);
    }
    
    return history;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'historique KPI:', error);
    throw error;
  }
}

/**
 * Calcule la comparaison entre deux p√©riodes
 * @param {object} currentData - Donn√©es de la p√©riode actuelle
 * @param {object} previousData - Donn√©es de la p√©riode pr√©c√©dente
 * @returns {object} Objet avec change, changePercent, et trend
 */
export function calculatePeriodComparison(currentData, previousData) {
  try {
    console.log('üìä calculatePeriodComparison - Calcul de comparaison');
    console.log('üìà Donn√©es actuelles:', currentData);
    console.log('üìâ Donn√©es pr√©c√©dentes:', previousData);
    
    // Si pas de donn√©es pr√©c√©dentes, retourner des valeurs neutres
    if (!previousData || previousData === 0) {
      console.log('‚ö†Ô∏è Pas de donn√©es pr√©c√©dentes disponibles');
      return {
        change: 0,
        changePercent: 0,
        trend: 'neutral'
      };
    }
    
    // Calculer la diff√©rence absolue
    const change = currentData - previousData;
    
    // Calculer le pourcentage de variation
    const changePercent = previousData !== 0 
      ? ((currentData - previousData) / Math.abs(previousData)) * 100 
      : 0;
    
    // D√©terminer la tendance
    let trend = 'neutral';
    if (change > 0) {
      trend = 'up';
    } else if (change < 0) {
      trend = 'down';
    }
    
    const result = {
      change: Math.round(change * 100) / 100, // Arrondir √† 2 d√©cimales
      changePercent: Math.round(changePercent * 100) / 100, // Arrondir √† 2 d√©cimales
      trend
    };
    
    console.log('‚úÖ R√©sultat de la comparaison:', result);
    
    return result;
  } catch (error) {
    console.error('‚ùå Erreur lors du calcul de comparaison:', error);
    return {
      change: 0,
      changePercent: 0,
      trend: 'neutral'
    };
  }
}

